" Allow multiple buffers in the same window
set hidden
" Better command-line completion
set wildmenu

set splitbelow

let maplocalleader = ",,"

" Ensure that we are in modern vim mode, not backwards-compatible vi mode
set nocompatible
set backspace=indent,eol,start
if has("nvim")
  set guicursor=i:ver25-iCursor
endif

set clipboard=unnamedplus

if has("nvim")
  let g:python3_host_prog = '/home/cam/neovim3/bin/python'
endif

set nofoldenable
let g:vim_markdown_folding_disabled = 1

set hidden

let g:cornelis_agda_prefix = "\\"

filetype off " required for Vundle plugin manager
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required Plugin 'gmarik/Vundle.vim' vim-c0 plugin on Github repo
Plugin 'cmugpi/vim-c0'

Plugin 'mbbill/undotree'

" NERD tree
"Plugin 'scrooloose/nerdtree'

" Syntastic
"Plugin 'vim-syntastic/syntastic'

" Whitespace
Plugin 'ntpeters/vim-better-whitespace'

" Language-specific plugins
Plugin 'jez/vim-better-sml'
" This is not the 'official' rust.vim plugin because it doesn't support cargo
" (yet)
"Plugin 'mckinnsb/rust.vim'

Plugin 'neovimhaskell/haskell-vim'
Plugin 'itchyny/vim-haskell-indent'

Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'

" Surround
Plugin 'tpope/vim-surround'

" Let's repeat things!
Plugin 'tpope/vim-repeat'

Plugin 'scrooloose/nerdcommenter'

if has("nvim")
  Plugin 'rbgrouleff/bclose.vim'
endif
Plugin 'francoiscabrol/ranger.vim'

Plugin 'Asheq/close-buffers.vim'

Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

Plugin 'tpope/vim-fugitive'

Plugin 'airblade/vim-gitgutter'

Plugin 'christophermca/meta5'
Plugin 'flazz/vim-colorschemes'

Plugin 'tpope/vim-obsession'

Plugin 'CharlesGueunet/VimFilify'

if has("nvim")
  Plugin 'sbdchd/neoformat'
else
  Plugin 'Chiel92/vim-autoformat'
endif

Plugin 'psf/black'

Plugin 'junegunn/fzf.vim'

Plugin 'ocaml/vim-ocaml'

if has("nvim")
  Plugin 'neovim/nvim-lspconfig'

  Plugin 'lifepillar/vim-mucomplete'

  Plugin 'kana/vim-textobj-user'
  Plugin 'neovimhaskell/nvim-hs.vim'
  Plugin 'liuchengxu/vim-which-key'
  Plugin 'isovector/cornelis', { 'do': 'stack build' }

  Plugin 'nvim-lua/plenary.nvim'
  Plugin 'scalameta/nvim-metals'

  Plugin 'lervag/vimtex'

  Plugin 'MunifTanjim/nui.nvim'
  Plugin 'ShinKage/idris2-nvim'
endif

call vundle#end()

" Enable filetype detection and syntax highlighting
syntax on
filetype on
filetype indent on
filetype plugin on

let g:airline#extensions#tabline#enabled = 1

" Helpful information: cursor position in bottom right, line numbers on
" left
set ruler
set number

set tabstop=2
set shiftwidth=2
set expandtab

hi clear SignColumn

if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
  colorscheme molokai
endif

" Indent as intelligently as vim knows how
set smartindent

" Show multicharacter commands as they are being typed
set showcmd

" Show 80 character limit line
set colorcolumn=80

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=10

let g:bufferline_rotate=1

" Change leader key
let mapleader=","

" buffer stuff
map <C-Right> :bnext<CR>
map <C-Left> :bprevious<CR>
map <C-k> :bnext<CR>
map <C-j> :bprevious<CR>
map <leader>d :Bdelete this<CR>

map <C-P> :Files<CR>

"map <C-O> :NERDTree<CR>
"let NERDTreeQuitOnOpen=1
map <C-O> :RangerCurrentDirectory<CR>
nmap <Space> :

nnoremap gV `[v`]

" ARM assembly syntax
let asmsyntax='armasm'
let filetype_inc='armasm'

" gundo tree
nnoremap <F2> :GundoToggle<CR>

" make and associated convenience
nnoremap <leader>m :make<CR>
nnoremap <C-Up> :cn<CR>
nnoremap <C-Down> :cp<CR>

" Search as characters are entered
set incsearch
" Highlight matches
set hlsearch

" Save
nnoremap <leader>w :w<CR>

" Save session
nnoremap <leader>s :mksession<CR>

" Git commit/push
nnoremap <leader>r :! git commit -am "kek" && git push<CR>

" Tab things
nnoremap <Tab> >>
nnoremap <S-Tab> <<

nnoremap <F2> :UndotreeToggle<cr>

let g:haskell_indent_disable=1

" don't clutter with swap files while using gvim
if has("gui_running")
  set noswapfile
  set nobackup
  set nowritebackup
endif

" Enable statusbar
set laststatus=2

set mouse=a

let g:airline_theme='luna'
let g:bufferline_echo=0

" this doesn't actually work either
if &filetype ==# 'ocaml'
" aaaaaaaaaaaaaaa ftplugin isn't working so we have to do this every time
" if neovim stalls on open it's because opam is being terrible

  " ## added by OPAM user-setup for vim / base ## 93ee63e278bdfc07d1139a748ed3fff2 ## you can edit, but keep this line
  let s:opam_share_dir = system("opam var share")
  let s:opam_share_dir = substitute(s:opam_share_dir, '[\r\n]*$', '', '')

  let s:opam_configuration = {}

  function! OpamConfOcpIndent()
    "execute "set rtp^=" . s:opam_share_dir . "/ocp-indent/vim"
  endfunction
  let s:opam_configuration['ocp-indent'] = function('OpamConfOcpIndent')

  function! OpamConfOcpIndex()
    execute "set rtp+=" . s:opam_share_dir . "/ocp-index/vim"
  endfunction
  let s:opam_configuration['ocp-index'] = function('OpamConfOcpIndex')

  function! OpamConfMerlin()
    let l:dir = s:opam_share_dir . "/merlin/vim"
    execute "set rtp+=" . l:dir
  endfunction
  let s:opam_configuration['merlin'] = function('OpamConfMerlin')

  let s:opam_packages = ["ocp-indent", "ocp-index", "merlin"]
  let s:opam_check_cmdline = ["opam list --installed --short --safe --color=never"] + s:opam_packages
  let s:opam_available_tools = split(system(join(s:opam_check_cmdline)))
  for tool in s:opam_packages
    " Respect package order (merlin should be after ocp-index)
    if count(s:opam_available_tools, tool) > 0
      call s:opam_configuration[tool]()
    endif
  endfor
  " ## end of OPAM user-setup addition for vim / base ## keep this line
  let g:opamshare = substitute(system('opam var share'),'\n$','','''')
  execute "set rtp+=" . g:opamshare . "/merlin/vim"
  nnoremap <Leader>t :MerlinTypeOf<CR>
  nnoremap J :MerlinLocate<CR>
endif

set noshowmode

if has("nvim")
  tnoremap <C-\> <C-\><C-n>
  set inccommand=nosplit
endif

let g:black_virtualenv = '/home/cam/neovim3/'

let g:neoformat_enabled_ocaml = ['ocaml']

function! FormatBuffer()
  if &filetype ==# 'rust' || &filetype ==# 'haskell' || &filetype ==# 'c' || &filetype ==# 'ocaml'
    if has("nvim")
      execute "silent! Neoformat"
    else
      execute "silent! Autoformat"
    endif
  endif
  if &filetype ==# 'python'
    " execute "Black"
  endif
endfunction

au BufWritePre * call FormatBuffer()

let g:neoformat_enabled_ocaml = ['ocamlformat']

let g:neoformat_haskell_ormolu =
\ { 'exe': 'fourmolu'
\ , 'args': ['--stdin-input-file', '.']
\ , 'stdin': 1
\ }
let g:neoformat_enabled_haskell = ['ormolu']

let g:neoformat_enabled_rust = ['rustfmt']

function! CornelisLoadWrapper()
  if exists(":CornelisLoad") ==# 2
    CornelisLoad
  endif
endfunction

au BufReadPre *.agda call CornelisLoadWrapper()
au BufWritePost *.agda execute "normal! :CornelisLoad\<CR>"

au BufRead,BufNewFile *.agda call AgdaFiletype()
function! AgdaFiletype()
  let g:cornelis_split_location = 'Bottom'
  let g:cornelis_max_size = 15

  nnoremap <buffer> <leader>l :CornelisLoad<CR>
  nnoremap <buffer> <leader>r :CornelisRefine<CR>
  nnoremap <buffer> <leader>g :CornelisMakeCase<CR>
  nnoremap <buffer> <leader>t :CornelisTypeContext<CR>
  nnoremap <buffer> <leader>T :CornelisTypeContextInfer<CR>
  nnoremap <buffer> <leader>n :CornelisSolve<CR>
  nnoremap <buffer> <leader>a :CornelisAuto<CR>
  nnoremap <buffer> J         :CornelisGoToDefinition<CR>
  nnoremap <buffer> [/        :CornelisPrevGoal<CR>
  nnoremap <buffer> ]/        :CornelisNextGoal<CR>

  call cornelis#bind_input("forall", "∀")
  call cornelis#bind_input(":", "∶")
  call cornelis#bind_input("Pi", "ℿ")
  call cornelis#bind_input("mu", "μ")
  call cornelis#bind_input("nu", "ν")
  call cornelis#bind_input("nlambda", "ƛ")
  call cornelis#bind_input("N", "ℕ")
  call cornelis#bind_input("Gamma", "Γ")
  call cornelis#bind_input("tau", "τ")
  call cornelis#bind_input("vdash", "⊢")
  call cornelis#bind_input("equiv", "≡")
  call cornelis#bind_input("nequiv", "≢")
endfunction

luafile ~/.vim/lsp_config.lua
sign define LspDiagnosticsSignError text=X
sign define LspDiagnosticsWarning text=!
sign define LspDiagnosticsSignHint text=?

set completeopt=menuone,noinsert,noselect
set shortmess+=c

au TextYankPost * silent! lua vim.highlight.on_yank()
